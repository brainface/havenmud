You say in Eltherian, "Logging."

Davantalus, God of Nature is here.

Zeddicus is here.

Duuk the Lord of Balance and Order is here.

Laoise the Destructor of Saahagoth is here.

Vanyel the Explorer of the World's Essence is here.

Alessandra the Seductress of Kailie is here.

Zaxan Zimtafarous the Supreme Overlord of Magic is here.

Amelia the Goddess of Joy and Happiness is here.





Vanyel looks around.

'logging
You say in Eltherian, "Logging."

> > Vanyel waves to you.

Duuk says in common, "Ok."

Duuk says in common, "Let's start by saying, up front, that for the purposes of

    this class, the rules of the english language are to be ignored."

Zeddicus says in common, "This sentence no verb."

Duuk says in common, "Descartes, in his infinite wisdom, chose to use

    english-grammar terms for verbs that have nothing to do with their actual

    usage."

Duuk asks in common, "So stay with me and don't argue the grammar, ok?"

Duuk says in common, "A verb on Haven is a command that allows a living to

    perform a given defined action."

Duuk says in common, "Sometimes, this action can affect another object."

Duuk says in common, "Such as "attack smurf"."

Duuk says in common, "And sometimes it can even rely on 2 objects at once."

Duuk says in common, "Such as combine thing with thing, compare thing to thing,

    and even light torch with match."

Duuk says in common, "Documentation for tonight's class is available in

    /std/example/code_classes."

Duuk says in common, "3 files, 080804-1.txt and -2 and -3."

Duuk says in common, "If you'll all please view -1.txt."

A white flash blinds you. When you regain your sight, Zaxan is gone.

Duuk says in common, "This is a log of Yanna doing an action."

Duuk says in common, "You'll see that I cloned a furry thing and had her "look

    at thing"."

Duuk says in common, "First, the mud broke the sentence down into component

    words."

Duuk says in common, "Look:at:thing."

Duuk says in common, "It then figured out, because it is that smart, that "at

    OBJ" might be what it was trying to do."

Duuk says in common, "You can assume that the mud does this via voodoo ;)."

Davantalus snickers.

Duuk says in common, "Skip down to Trying can_look_at_obj()."

Duuk says in common, "When it gets to "Trying can_look_at_obj() in

    (/verbs/items/look), it then returns 1."

Duuk says in common, "What is happening there is that the VERB is checking

    first."

Duuk says in common, "Can_look_at_obj() is defined in look.c, which is the verb

    file."

Duuk says in common, "It checks ONLY _1_ thing."

Duuk says in common, "Can the player physically do the thing he has typed."

Your status has been recorded.

Duuk says in common, "This is where you'd check for things like sleeping,

    paralyzed, low SP, low MP, etc."

Duuk says in common, "You do NOT check for things that involve anything but the

    acting player."

Duuk says in common, "Just CAN the PLAYER actually VERB."

Duuk asks in common, "Make sense to everyone?"

Alessandra nods solemnly.

Vanyel nods solemnly.

Laoise nods solemnly.

Davantalus nods solemnly.

Duuk says in common, "Good."

Duuk says in common, "You'll see that this got "Returned 1"."

Duuk says in common, "If it had returned "But you are asleep!", it would have

    passed that message on to the player and exited."

Duuk says in common, "End of story."

Duuk says in common, "But since it returned 1, it moves on to the next step."

Duuk says in common, "Which is "Ok, the player CAN VERB"."

Duuk asks in common, "But can the TARGET be VERBED?"

Duuk says in common, "So it then calls "direct_look_at_obj()" in the furry

    thing."

Duuk says in common, "Which is, oddly enough, defined in either body.c or

    living.c."

Duuk says in common, "It just returns 1, which means that under all conditions

    a    a furry thing can eb looked at."

Davantalus asks in common, "Unless the furry thing were an immortal?"

Duuk says in common, "Now try "look at duuk" and guess what

    direct_look_at_obj() returns in /lib/users/creator.c."

Duuk says in common, "Immortals on Haven don't inherit LIB_LIVING, so we are

    that cool."

Davantalus nods solemnly.

Duuk says in common, "We have no bodies, so the direct_look_at_obj() rule is

    actually defined in our creator.c object."

Davantalus is going with 0.

Duuk says in common, "Nope."

Duuk says in common, "Returns, "You have a hard time focusing on that."."

Davantalus goes, "Ahhhhh".

Duuk says in common, "If It returned 0, you would get the error message "You

    can't look at that."."

Duuk asks in common, "Ever try, as a player, to attack the Haven Fountain?"

Laoise shakes her head.

Vanyel nods solemnly.

Duuk says in common, "That object doesn't have direct_attack_liv() in it, which

    means it defaults to 0."

Duuk says in common, "Which means, "You can't attack that."."

Duuk says in common, "So if you wanted to add a verb called "smooch", you'd

    need to add direct_smooch_liv() into the living.c file to return 1."

Duuk says in common, "Otherwise nothing would be smoochable."

Duuk says in common, "Ok, so now we know that the player CAN VERB."

Duuk says in common, "And we know that the TARGET can be VERBED."

Duuk says in common, "So we're moving right along at quite the clip."

Duuk says in common, "In this case ("look at thing"), we're all set with the

    checks, so it moves on to "do_look_at_obj()" in the verb."

Duuk says in common, "This is where it actually executes the code."

Duuk says in common, "And there was much rejoicing."

Vanyel cheers.

Davantalus goes, "Woo! Woo!"

Laoise says in common, "Breakfast cereals."

Alessandra grins.

Duuk says in common, "The next case is grammatically horrible."

Laoise nods solemnly.

Zeddicus rejoices.

Duuk says in common, "Pretend you need to light a torch with a match."

Duuk exclaims in common, "That requires you interact with TWO objects!"

Duuk gasps.

Duuk exclaims in common, "The driver and mudlib, luckily for us, allow for

    that!"

Your status has been recorded.

Duuk asks in common, "First, before it does anything else, what function is

    called?"

Duuk looks around.

Duuk says in common, "After I type, "light torch with match"."

Duuk asks in common, "Zedd?"

Zeddicus says in common, "Can_light_obj_with_obj."

Duuk says in common, "Good."

Duuk asks in common, "Which is located where?"

Zeddicus says in common, "The verb."

Duuk says in common, "Rockin."

Duuk asks in common, "Everyone agrees with that?"

Davantalus nods solemnly.

Alessandra nods solemnly.

Laoise nods solemnly.

Duuk says in common, "Good."

Duuk says in common, "You're all correct."

Duuk says in common, "Next, we need to know if we can LIGHT the things."

Duuk says in common, "So first, the function "direct_light_obj_with_obj()"

    would be called in the torch."

Amelia nods solemnly.

Duuk says in common, "Assuming the torch can be light (returns 1)."

Duuk says in common, "We then add ANOTHER step."

Duuk says in common, "We know the player CAN LIGHT."

Duuk says in common, "We know the torch CAN BE LIT."

Duuk says in common, "Now we need to knoDuuk says in common, "Now we need to know can the match do the lighting."

Duuk says in common, "Which is..."

Duuk says in common, "Indirect_light_obj_with_obj()."

Duuk says in common, "For the purposes of the mudlib: the FIRST object is the

    direct object, the SECOND object is the indirect object."

Duuk says in common, "Regardless of the grammer, FIRST = DIRECT, SECOND =

    INDIRECT."

Duuk asks in common, "Everyone got that?"

Alessandra nods solemnly.

Davantalus nods solemnly.

Amelia nods solemnly.

Laoise nods solemnly.

Duuk says in common, "Classic example of that being stupid:."

Duuk says in common, "Give torch to zeddicus."

Davantalus chuckles out, "Heh Heh Heh".

Duuk says in common, "Grammatically, the torch is direct, zeddicus would be

    indirect."

Duuk says in common, "Which is the same for the mud."

Duuk says in common, "Everyone is happy."

Duuk says in common, "But "give zeddicus torch"."

Duuk says in common, "Zeddicus is, grammatically, still the indirect object."

Duuk says in common, "But for Haven, he becomes the DIRECT object, since he's

    the first thing."

Amelia shudders.

Duuk says in common, "Amelia, I just keep thinking of you clucking over this

    going, "THAT'S NOT RIGHT DAMMIT!"."

Duuk snickers.

Duuk says in common, "And you shuddered while I was typing that."

Amelia says in common, "I was fine until zedd became the direct object."

Duuk says in common, "I knew you'd get upset on that."

Duuk says in common, "It took me a week to wrap my brain around it."

Zeddicus flexes his directness.

Duuk is good at grammar.

Laoise goes, "OoOoOoOOoOOoOO" at Zeddicus.

Amelia needs to back up due to that.

Duuk says in common, "See how in the first syntax, "give torch to zeddicus",

    torch is direct and zedd is indirect."

Laoise asks in common, "Would give zeddicus torch work on here?"

Duuk says in common, "Which is grammatically corect."

Duuk says in common, "Yup."

Amelia says in common, "So in ... say, zedd.  he'd have to have

    'direct_light_object_with_obj()" and the indirect...because of that."

Duuk says in common, "The rule is defined in the verb that GIVE OBJ OBJ works."

Duuk says in common, "Right."

Duuk says in common, "So, "direct_give_obj_obj" means zedd is the direct."

Duuk says in common, "And indirect_give_obj_to_obj() he's indirect."

Duuk says in common, "It's dumb.  Deal with it."

Amelia says in common, "Okay, another example.  "light torch with match" ... or

    "light match torch" (ignoring that this, hopefully, doesn't work)."

Duuk says in common, "No way to fix it, either."

Your status has been recorded.

Duuk says in common, "Ignoring the fact that the rule doesn't exist."

Amelia nods solemnly.

[time] It is twilight. Time: Weddingday Dragons the 1st 17:30, Year 9 (autumn)

Duuk says in common, "Match would be DIRECTthere and TORCH would be indirect."

Duuk says in common, "The second object is always indirect."

Amelia asks in common, "How does the mud know in these functions which is

    supposed to be lighting/be lit?"

Duuk says in common, "It doesn't care."

Duuk says in common, "It only cares if the function returns 1 or not."

Duuk says in common, "So to expand on the example."

Duuk says in common, "Light torch with match."

Amelia asks in common, "Isn't this the point where you would see if the match

    could do the lighting    could do the lighting?"

Duuk says in common, "Calls can_light_obj_with_obj in the verb to see if teh

    player can DO it."

Duuk says in common, "Then it wuold call direct_light_obj_with_obj in the torch

    to see if the torch can be lit."

Duuk says in common, "And THEN, last but not least."

Duuk says in common, "It would call indirect_light_obj_with_obj in the match."

Amelia gets it now.

Davantalus goes, "Woo! Woo!"

Duuk says in common, "And see if the match can be used to light something."

Duuk says in common, "So for the give zedd torch example."

Duuk asks in common, "First: can_give_obj_obj in the verb: Can I give

    something?"

Duuk says in common, "Assuming I'm not sleeping or paralyzed (two most common

    checks), it returns 1."

Duuk says in common, "So it moves on to see if zedd can be given something

    (direct_give_obj_obj())."

Duuk says in common, "Assuming he's capable (isn't over his max carrying

    weight, etc) it'll return 1."

Duuk says in common, "And THEN it'll check indirect_give_obj_obj() in the

    object to make sure I can give it away (no PreventDrop(), etc)."

Duuk asks in common, "Everyone with me?"

Davantalus nods solemnly.

Alessandra says in common, "Yeah."

Vanyel nods solemnly.

Duuk says in common, "Now would be a good time to take the first set of

    questions."

Duuk says in common, "Ask ONLY something relative to what we've already

    covered."

Duuk asks in common, "Anyone?"

Duuk can sense Amelia typing.

Zeddicus nogs at Duuk.

Davantalus is happy.

Amelia is fine.

Duuk bogs.

Duuk says in common, "Ok then."

Duuk says in common, "Thus far, you now know how to read those verbs."

Duuk says in common, "Once it has satisfied itself that everyone is ok with

    VERBING and being VERBED."

Duuk says in common, "It moves onto the fun part."

Amelia asks in common, "Actually verbing?"

Duuk says in common, "Back to the verb file it then calls, "do_verb_rules."

Duuk says in common, "Like "do_give_obj_obj()"."

Duuk says in common, "Or do_light_obj_with_obj()."

Duuk says in common, "This is where you actually do the verb."

Amelia asks in common, "Are there any other crazy grammar things I'm going to

    be thrown by here?"

Duuk says in common, "None."

Amelia smiles.

Duuk says in common, "Actually, at this point it becomes fairly easy."

Duuk says in common, "The do_ function has arguments."

Duuk says in common, "So if you have do_give_obj_obj()."

Your status has been recorded.

Duuk says in common, "It will be: do_give_obj_obj(object target, object what)."

Duuk says in common, "You can name them what you like."

Duuk says in common, "It will then take the OBJ args and parse them into the

    function."

Duuk says in common, "So zeddicus would be 'target' and the torch would be

    'what'."

Duuk says in common, "In this case, the do_give() would be fairly easy."

Duuk says in common, "Since we already know that Zedd can receice the torch (or

    direct_give_obj_obj()) would have failed."

Duuk says in common, "And we already know that the torch can be given (or

    indirect_etc) would have failed."

Duuk says in common, "So you just send a message ("Duuk gives a torch to

    Zeddicus") and do what->eventMove(target);."

Duuk says in common, "Then return 1;."

Duuk says in common, "All done."

Davantalus smiles.

Duuk says in common, Duuk says in common, "Nothing to it."

Duuk says in common, "Technical stuff now."

Duuk says in common, "In the can_verb() function, it will NOT parse the

    arguments."

Duuk says in common, "So can_give_obj_obj() doesn't have object what, object

    target as usable variables."

Duuk says in common, "Can is ONLY used to see if the acting player is actually,

    physically able to perform the verb."

Duuk says in common, "So you don't really need to know anything about the

    target objects."

Duuk asks in common, "Make sense?"

Laoise nods solemnly.

Duuk says in common, "Believe it or not."

Duuk says in common, "That's verbs."

Duuk asks in common, "Are there any questions at all?"

Amelia says in common, "Yup."

Duuk says in common, "Fire away."

Amelia asks in common, "The various can_blah() functions don't have any useful

    way to relate the different pieces to each other?"

Duuk says in common, "They don't need to."

Duuk says in common, "Can_blah only checks the player."

Duuk asks in common, "Can I do this verb?"

Amelia says in common, "So just this_player() there."

Duuk says in common, "Or better, "Am I physically able, barring any outside

    influence, to do this?"."

Duuk says in common, "Yup."

Amelia says in common, "What about direct_light.... indirect_...."

Duuk says in common, "Those you can."

Duuk says in common, "They'll parse."

Amelia says in common, "Ahhh."

Amelia nods solemnly.

Duuk says in common, "So let's pretend:."

Vanyel is gone from this reality!

Duuk says in common, "Direct_bitchslap_liv_with_obj()."

Duuk says in common, "Would have object what for the "what" part."

Duuk says in common, "And you'd use this_player() for the acting object."

Duuk says in common, "And you can use any checks from the current object."

Duuk says in common, "So like ->."

Duuk says in common, "If userp(this_player()) && userp(this_object()) {."

Vanyel asks in common, "If the verb does not include certain items that may

    restrict the action of the player, (like "go west" doesn't mention other

    players that might be guarding), where should that be checked?"

Duuk says in common, "If (newbiep(this_object())) return "Don't slap the

    newbies.";."

Your status has been recorded.

Duuk says in common, "Go west."

Duuk says in common, "Let's parse that."

Duuk says in common, "Go west."

Duuk says in common, "First off: can_go_str."

Duuk says in common, "Let's assume I'm alive, awake, and not paralyzed or out

    of SP."

Duuk says in common, "So it returns 1."

Duuk says in common, "Follow me."

Duuk says in common, "Go then checks the ROOM."

Duuk says in common, "As the target object."

Vanyel checks his possessions.

Duuk says in common, "And checks CanGo() in there."

Duuk says in common, "Assuming the room agrees."

Duuk says in common, "It woudl return 1."

Duuk says in common, "Should tehre be a closed door, or shoudl the target room

    be land and this_player() be a ship, it would return something else."

Davantalus nogs.

Duuk says in common, "It would then move along to do_go_str."

Vanyel says in common, "So it should return 0 in CanGo in the room."

Duuk says in common, "Nope."

Duuk says in common, "That would be vague."

Duuk says in common, "Duuk says in common, "And say "You stay where you are"."

Vanyel says in common, "Er, right, error message."

Duuk says in common, "It should return a string error message."

Amelia asks in common, "On all the can_ direct_ and indirect_, a return of 1

    means 'go on to the next check, or if this is the last one, do it'.  A

    return of 0 makes a message like, 'you cant attack that' ... and a return

    of string means 'print this to this_player()'?  Is there any other option?"

Duuk says in common, "Nope."

Duuk says in common, "0 = fail without a good reason, 1 = success, string =

    print this and don't do it/fail."

Duuk says in common, "For all practical purposes, you'll never return 0 in verb

    coding."

Duuk says in common, "You'll either return 1 or a message explaining the

    failure."

Davantalus nods solemnly.

Amelia says in common, "In the parsing, could *any* word be put in?   I'm

    thinking of the 'with' and 'at' that get inserted."

Duuk says in common, "There are technically a list somewhere in the driver of

    "words" allowed to connect stuff."

Duuk says in common, "But I've never run across one that makes sense taht isn't

    in the list."

Duuk says in common, "Like direct_verb_at."

Duuk says in common, "Or with, or on, or in."

Amelia was trying to think of an example, and failing.

Duuk says in common, "Etc."

Davantalus says in common, ""google"."

Duuk says in common, "Google is a verb ;)."

Vanyel says in common, "Mmm, prepositions."

[time] It is night. Time: Weddingday Dragons the 1st 18:30, Year 9 (autumn)

Duuk says in common, "Pretty much any preposition is a valid "verb rule" word."

Duuk says in common, "Like STR on STR."

Davantalus goes, "Ahhhhh".

Duuk says in common, "STR can be used."

Duuk says in common, "See also: launch verb."

Amelia asks in common, "If I wanted something abnormal, i could just use str,

    then?"

Duuk says in common, "Yup."

Duuk says in common, "Launch verb is a good example of that."

Duuk says in common, "Even though the syntax help says, "launch attack on

    <ship>", it's actually launch STR on STR, so if I decided at some point to

    change it to "launch catapults" vs "launch ballistae" for different

    weapons, I don't have to change much."

Duuk says in common, "Just add a check into can_launch_str_on_str."

Laoise asks in common, "For the wep string?"

Amelia asks in common, "To make sure str is the right word?"

Duuk says in common, "Bingo."

Your status has been recorded.

Duuk says in common, "To make sure some idiot didn't type "launch vanyel at

    amelia"."

Davantalus chuckles.

Laoise asks in common, "Darn. that won't work?"

Amelia says in common, "Like it hasn't happened before..."

Laoise says in common, "He looks so launchable."

Duuk snickers.

Vanyel launches.

Duuk asks in common, "Any other questions?"

Zeddicus loads Vanyel into the trebuchet.

Davantalus breaks it.

Amelia thinks she's okay.

Duuk asks in common, "Everyone is good?"

Davantalus nods solemnly.

Alessandra nods solemnly.

Amelia says in common, "Wait."

Duuk says in common, "Ok, ONE IMPORTANT THING."

Duuk says in common, "VITAL."

Duuk says in common, "FUCKING HUGELY MASSIVELY VITAL."

Amelia puts an ear to the air.

Davantalus raises his eyebrow.

Duuk says in common, "For some unknown reason."

Duuk saDuuk says in common, "Anything that inherits LIB_VERB is known to the mud as a

    verb."

Duuk says in common, "Which means even if it's /realms/duuk/smooch.c, the mud

    will see it."

Duuk says in common, "And will be able to use it."

Duuk says in common, "I'm sure there is something in the verb lib and verb

    daemon I could change to disable that."

Duuk says in common, "But for now, be aware of it."

Amelia was looking at launch.  And can_launch_str_on_str() specifically.  Last

three lines of that function.

Duuk says in common, "So don't announce to players you're working on a "fuck"

    verb before its done, because they'll be able to use it."

Zeddicus says in common, "Or just use a TC check in the can_."

Duuk nogs at Zeddicus.

Amelia is wondering why you don't just return ship-CanLaunchWeapons(who,

target, wep);.

Davantalus says in common, ""launch attack on duuk" runtimed."

Duuk says in common, "Because I'm anal ;)."

Duuk exclaims in common, "Interesting!"

Amelia asks in common, "And wanted to use three lines of code instead of one?"

Amelia winks.

'stop logging
You say in Eltherian, "Stop logging."

> 