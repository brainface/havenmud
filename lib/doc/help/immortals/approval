How To Make Laoise Love You During QC
------------------------------------------------

Step One:  Everything updates.

Step Two:  Everything works.
	Walk through the area.  Use a test char.  Make sure
	your merchant actually sells and buys stuff.  Make sure
	your npcs are wearing their clothes and wielding their
	weapons.  Look at things.  

Step Three:  Readable Code.
	If your approval team has to work hard to just be able to
	read your code and find your descriptions, they will
	tell you to redo it.  That's it.  You don't pass go or
	collect any notes on the other stuff, and you have to
	wait until they have time--again.  Look at the example
	rooms you've been given on what readable code looks like.
	
	It also helps use get through your code if you use 
	reasonable file names.  while descriptive, "3_room_angel
	_project" is a pain to keep typing in.  It's also hard
	to find a specific room if all the files are "room1" through
	"room50".  

	Another thing you'll find on Haven is that npcs, objs,
	and rooms are all split into different directories, generally
	called "npc", "obj" and "room".  Also, for ease of moving
	areas around (such as out of your /realms directory and
	into /domains), we use aliases for all file references.
	Ask your sponsor how to make a ".h" file if you don't
	know already.  

Step Four:  Grammar and Spelling.
	Copy your descriptions into spellcheck if you have problems
	with this.  Have a friend read it over.  Your approval staff
	should not be giving you fifty pages of notes on this.

Step Five:  Balance.
	A tiny piece of paper doesn't weigh 50 kg.  A harmless rat
	can't kill a level 10 player.  Use a test char.  Make it
	level 10.  Try to kill the rat.  If you fail, you need to 
	make changes.

Step Six:  Thorough Item and Adjective lists.
	If the long description in a room talks about a box of
	nifty flowers, I can:
	"look at box" "look at flowers" "look at flower" "look at 
	box of flowers" "look at box of nifty flowers" "look at 
	nifty flower" "look at nifty flowers"
	We used to have to do this the hard way (by typing all
	that out) so don't complain.  You have SetItemAdjectives().

Step Seven:  Descriptions.
        SetLongs should be of reasonable length. At 80 columns,
        guildlines are: Room 4-6 lines, Npcs/obj 3-4 lines. This
        is a required minimum.

	The approval staff shouldn't fall asleep reading your
	descriptions.  Neither should the players.  Rooms should
	include information about what exits and enters are
	around.  NPCs should include information about how
	difficult they are to kill, what their skills, morality,
	religion, town, race, etc. are.  OBJs should include
	information about their size, composition (iron, wood,
	etc.), and use are.

	To keep us awake, try to put something interesting to
	look at in each room.  Make your NPCs say nifty things.
	One easy way to do this is to put at least one unique
	thing in each room--a cool mural on the wall in the
	rich merchant's home, for example.  Make funny items,
	like the famous rat-on-a-stick.

	Another special issue is item and npc descriptions.
	These descriptions will be the same, always.  This
	includes, but is not limited to:  when the item
	has been fully repaired, when the item is being
	used, when the item is not being used, when the
	item is broken down, when the NPC is near-dear,
	when the NPC is sleeping, when the NPC is lying
	down, when the NPC has been bumped to another room.

	You can use SetAction() to give the NPCs random
	actions.  You can remove damage points from items
	to make them more worn down.  If you need help
	figuring out how to do something, just ask another
	immortal.

Step Eight:  Listen and Smell.
	All rooms should have a default listen and smell.
	All things that are smelly, like piles of rotting
	food, should be smell-able.  All things that are noisy,
	like waterfalls, should be listen-able.  

Step Nine:  Navigation.
	The long description should describe all the exits and
	enters.  They should also give a general idea of where
	those exits and enters go--into a building, through a
	forest, along a road.  The area should not be difficult
	for me to map out.  Also, if I can walk east into a 
	room, I should be able to walk west back out of it, and
	into the room I originally came from.

Step Ten:  Theme.
	The area should fit our theme.  Magic.  Swords.  No guns.
	No computers.  Realism.

Step Eleven:  Fully Coded.
	There are a lot of properties to set in an NPC or an OBJ.
	Properties like morality and religion often get overlooked,
	but some spells are based off of them.  Other things to
	consider:
		An npc that is proficient in slash attack should
			also be proficient in slash defense.
		A mage should use spells in combat.
		A rat should use teeth and claws to attack.
		Merchants (and sentient people in general) are
			probably carrying some money.
		A swordmaster is probably carrying, and using,
			a sword.
	These properties add a lot of cool functionalist to the
	mud.  Players like it when their "kill rats" spell works
	on the rat.

Step Twelve:  Fun.
	Believe it or not, people play Haven because it is fun.
	Make an area that you would enjoy playing, and other
	players will probably enjoy it, too.
	It's also worth considering what players "get" for using
	your area.  Are there good NPCs to train with?  Will
	they get lots of treasure for purchasing things?  Or will
	they get some sort of spiffy, useful item?  Or are things
	fun to look at and role-play with?

Step Thirteen:  Politeness.
	Don't tell the approval staff to fuck off when you get a 
	list of stuff to fix.  Don't act like it is stupid or
	beneath you.  If you really feel this way, then coding
	for Haven is not for you.  Go back to being a player.

	
