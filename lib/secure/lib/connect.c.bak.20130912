/*    /secure/lib/connect.c
 *    from the Nightmare IVr2 Object Library
 *    the object a user connects to before determining their real body
 *    created by Descartes of Borg 951103
 *    Version: @(#) connect.c 1.2@(#)
 *    Last Modified: 96/05/28
 *    Human town selection added by Zaxan@Haven
 *    All racial town modification by Duuk@Haven
 *    Language/Religion Modifications added by Zaxan@Haven
 *    Modified Oct 7, 2001 to switch from Zaxan's defines file to a daemon
 *    to control town and race setup functions by Duuk
 */

#include <lib.h>
#include <size.h>
#include <std.h>
#include <news.h>
#include <flags.h>
#include <config.h>
#include <daemons.h>
#include <message_class.h>

inherit LIB_PAGER;

#include "include/connect.h"


static private int CrackCount, NetDead; 
static private string Name, Terminal; 
static private object Player; 
static private mapping LastError;
static private int *Screen;
 
static void create(int binary) {
    CrackCount = 0;
    Name = "";
    Player = 0;
    NetDead = 0;
}

static void logon() {
    string welcome;
    string news;
    
    call_out((: eventTimeout :), LOGON_TIMEOUT);
    welcome = read_file(NEWS_WELCOME) || "Welcome to " + mud_name() + "!";
    receive(welcome);
    receive("\n" + center("Driver: " + version() + " Mudlib: " + mudlib() + " " + mudlib_version()) + "\n");
    receive("\nWhat name do you wish? ");
    if( !((int)BANISH_D->eventConnect("", query_ip_number())) ) {
	    news = read_file(NEWS_BANISHED) || "You are not allowed here.";
	    receive("\n" + news + "\n");
	    CHAT_D->eventSendChannel("CONNECT", "allnotify", Name + " (sitebanned login denied)");
	    Destruct();
      return; 
     }
    input_to((: InputName :), I_NOESC); 
} 

static void InputName(string name, string kill_me) {
    string news;
    mixed tmp;
    
  if( !name || name == "" ) 
  {
	  if( kill_me ) 
	  {
	    receive("\nPerhaps try another time then?\n");
	    Destruct();
	    return;
	  }	else {
	    receive("\nYou must enter a name in order to join!\n");
	    receive("\nWhat name do you wish? ");
	    input_to((: InputName :), I_NOESC, "kill me");
	    return;
	  }
  }
    Name = convert_name(name);
    if (Name == "quit") { 
     receive("\nThanks anyway!");
     receive("\n");
     eventDestruct();
     return;
    }
  name = capitalize(Name);
  if( (int)master()->is_locked() ) {
	  news = read_file(NEWS_LOCKED) || "No reason logged.";
	  receive("\n" + mud_name() + " is locked.  Reason:\n" + news + "\n");
	  if( CanLogin() ) receive("\n        >>> Access allowed <<<\n");
	  else {
	    receive("\n        >>> Access denied <<<\n");
	    Destruct();
	    return;
	  }
  }
  if( !user_exists(Name) ) {
	  eventCreatePlayer(name);
	  return;
  }
  if( !((int)BANISH_D->eventConnect(Name, query_ip_number())) ) {
	  news = read_file(NEWS_BANISHED) || "You are not allowed here.";
	  receive("\n" + news + "\n");
	  CHAT_D->eventSendChannel("CONNECT", "allnotify", Name + " (sitebanned login denied)");
	  Destruct();
    return; 
  }
  if( find_player(Name) ) NetDead = 1; 
  Player = (object)master()->player_object(Name);
  if( !Player ) {
	  receive("\nUnable to load a character object for you. This is a problem.\n");
	  receive("A message has been dispatched to currently online staff for assistance.\n");
	  CHAT_D->eventSendChannel("CONNECT", "error", "Failed to load player/creator object for " + Name);
	  Destruct();
	  return;
  }
  if( (tmp = (mixed)CHARACTER_D->eventConnect(Player->GetEmail(), Name, Player->GetKeyName())) != 1 ) {
	  if( tmp ) receive(tmp + "\n");
	  else receive(
	       "One of your characters is currently logged in.\n"
		   "You are allowed to have only 1 character online.\n"
		   );
	  Destruct();
	  return;
  }
  
  if( (string)Player->GetRace() == "essence" ) {
	  string sf;
	  NetDead = 0;
	  sf = save_file(Name);
	  unguarded( (: rm, sf + __SAVE_EXTENSION__ :) );
	  Player->eventDestruct();
	  eventCreatePlayer(name);
	  return;
  }
  receive("Password: ");
  input_to((: InputPassword :), I_NOECHO | I_NOESC, name);
} 

static void InputPassword(string pass, string cap) {
    string control;
    
  if( !pass || pass == "" ) {
	  receive("\nYou must enter a password.  Please try again later.\n");
	  Destruct();
	  return;
  }
  control = (string)Player->GetPassword();
  if (Player->NewServer()) {
  	receive("\nIt appears you have not logged in to the new server on this character.");
  	receive("\nA new password will be generated and sent to you.\n");
  	receive("\nPlease use that to login after you have received it.\n\n");
  	eventGeneratePassword(Player->GetEmail());
  }
  	
  if( control != crypt(pass, control) ) {
	  receive("\nInvalid password.\n");
	  if( ++CrackCount > MAX_PASSWORD_TRIES ) {
	    receive("\nNo more attempts allowed\n");
	    log_file("security", "Maximum password tries exceeded by " + Name + " from " + query_ip_name() + " on " + ctime(time())+".\n");
        CHAT_D->eventSendChannel("CONNECT","reports", "Max Password fails by " + cap + " (" + query_ip_name() + ")");
	    Destruct();
	    return;
	  }
	  receive("Password: ");
	  input_to( (: InputPassword :), I_NOECHO | I_NOESC, cap);
	  return;
  }
  if( !NetDead ) eventEnterGame();
  else eventReEnterGame(cap);
}
    
static void eventReEnterGame(string cap) {
  if( interactive(Player) ) {
	  receive("\nAn interactive copy of you currently exists.\n");
	  receive("Do you wish to take over this copy? (y/n) ");
       input_to((: ConfirmReconnect :), I_NOESC, cap);
	  return;
  }
  if( exec(Player, this_object()) ) {
	  log_file("enter", cap + " (exec): " + ctime(time()) + "\n"); 
	  VEHICLES_D->PlayerLogin(Player);
	  Player->eventReconnect();
  }
  receive("\nProblem reconnecting.\n");
  Destruct();
}

static void ConfirmReconnect(string ans, string cap) {
  object tmp; 

  if( !stringp(ans) || ans == "" || lower_case(ans)[0..0] != "y" ) {
	  receive("\nThen please try again later!\n");
  	Destruct();
	  return;
  }
  exec(tmp = new(LIB_PLAYER), Player); 
  exec(Player, this_object()); 
  destruct(tmp);
  Player->eventPrint("\nAllowing login.\n", MSG_SYSTEM);
  if (!creatorp(Player)) {
    CHAT_D->eventSendChannel(Player->GetName(), "notify", capitalize(Player->GetKeyName()) + " reconnected!", 1);
  }
  if(creatorp(Player)) {
    CHAT_D->eventSendChannel(Player->GetName(), "allnotify", capitalize(Player->GetKeyName()) + " reconnected from " +  query_ip_name(Player), 1);
  }
  Destruct();
}

static int CanLogin() {
    if ((int)BANISH_D->GetGuest(Name) ) return 1;
    if (immortal_exists(Name)) return 1;
    return 0;
}
 
static private void eventEnterGame() { 
  if(!exec(Player, this_object())) { 
	  receive("\nProblem connecting.\n"); 
    CHAT_D->eventSendChannel("Login","error", "Failed login at /secure/lib/connect.c eventEnterGame()");
    Player->eventDestruct();
    destruct(this_object());
    return; 
  } 
  if( Terminal ) Player->SetTerminal(Terminal);
  if( Screen ) Player->SetScreen(Screen[0], Screen[1]);
  VEHICLES_D->PlayerLogin(Player);
  Player->Setup();

  if (!Player->GetConfirmedEmail()) {
    Player->eventPrint("Your email status is NOT CONFIRMED. You will need to "
                       "use the 'chfn' command and set a valid email address. "
                       "If this situation is not corrected, your ability to login "
                       "to Haven may be restricted or removed!");
    }
  destruct(this_object()); 
} 

static void eventCreatePlayer(string cap) {
  if( !((int)BANISH_D->ValidName(Name)) ) {
    receive(capitalize(cap) + " is either not valid or is banished.\n");
	  receive("Haven requires that all names meet the following requirements:\n");
	  receive("\tAll characters must be:\n");
	  receive("\t\tA-Z\n\t\ta-z\n");
	  receive("\tMinimum length: " + MIN_USER_NAME_LENGTH + "\n");
	  receive("\tMaximum length: " + MAX_USER_NAME_LENGTH + "\n");
	  receive("\nPlease enter a new name: ");
	  input_to( (: InputName :), I_NOESC );
	  return;
  }
  if( !((int)BANISH_D->eventConnect(Name, query_ip_number())) ) {
	  string news;
	  news = read_file(NEWS_REGISTER) || "No registration info.";
	  receive(news);
	  Destruct();
	  return;
  }
  receive("Do you really wish to be known as " + cap + "? (y/n) ");
  input_to((: ConfirmName :), I_NOESC, cap);
}

static void ConfirmName(string ans, string cap) {
  if( !ans || ans == "" || lower_case(ans)[0..0] != "y" ) {
	  receive("\nOk, then enter the name you really want: ");
	  input_to( (: InputName :), I_NOESC );
	  return;
  }
  log_file("players/newbies", Name + " from " + query_ip_name() + " (" + ctime(time()) + ")\n");
  receive("\n\n"
          "Haven REQUIRES confirmation of a valid email address in order \n"
          "to maintain an accurate list of characters per player. This email \n"
          "address will be used ONLY for valid game related emails, such as \n"
          "confirmation of password, and will not be distributed or sold to \n"
          "outside marketing firms. As of 2/25/2006, this is no longer optional \n"
          "and failing to provide a valid email address will prevent your character \n"
          "from logging in. Please note that Hotmail should NOT be used, as it chooses \n"
          "to flag Haven emails as 'junk', and often does not deliver emails in a timely \n"
          "manner. Problems relating to hotmail accounts will NOT be dealt with by \n"
          "Haven administration.\n"
          "Email: ");
  input_to( (: InputEmail :), I_NOESC, cap);
} 
  
static void InputEmail(string email, string cap) {
   if (email == "") {
    receive("\n\n"
            "Haven REQUIRES confirmation of a valid email address in order \n"
            "to maintain an accurate list of characters per player. This email \n"
            "address will be used ONLY for valid game related emails, such as \n"
            "confirmation of password, and will not be distributed or sold to \n"
            "outside marketing firms. As of 2/25/2006, this is no longer optional \n"
            "and failing to provide a valid email address will prevent your character \n"
            "from logging in.\n"
            "Email: ");
    input_to( (: InputEmail :), I_NOESC, cap);
    return;
  }
 	Player = (object)master()->player_object(Name);
  if( !Player ) {
	  receive("\nUnable to load a character object for you. This is a problem.\n");
	  receive("A message has been dispatched to currently online staff for assistance.\n");
	  CHAT_D->eventSendChannel("CONNECT", "error", "Failed to load player/creator object for " + Name);
	  Destruct();
	  return;
  }
  Player->SetEmail(email);
  eventGeneratePassword(email);
  receive("\nAn email has been sent to " + email + " with a new password \n"
    "for this character. This allows us to verify the email address! \n"
    "Hotmail and Yahoo accounts should watch their \"junk\" folders, \n"
    "as this email is often flagged incorrectly as spam.\n");
  receive("\n\nPlease choose an interesting gender (male or female): ");
	input_to((: InputGender :), I_NOESC, cap);
}

static void InputGender(string str, string cap) {
    if( str != "male" && str != "female" && str != "m" && str != "f" ) { 
       receive("\nCute, but pretend to be either male or female instead.\n");
       receive("Gender: ");
       input_to((: InputGender :), I_NOESC, cap);
       return;
    }
    if (str == "m") str = "male";
    if (str == "f") str = "female";
    Player->SetGender(str);
    Player->SetCapName(cap);
    receive("\nEnter your real name (this is what will be seen on the OOC channel): ");
    input_to( (: InputRealName :), I_NOESC );   
} 
 
 
static void InputRealName(string rname) {
    if( !rname || rname == "" ) rname = "Unknown";
    rname = capitalize(rname);
    Player->SetRealName(rname);
    if (user_exists(lower_case(rname))) rname = "Unknown";
    if (rname != "Unknown")
    Player->SetOOCName(rname);
                             
  if (sizeof(SETUP_D->GetPlayerRaces(Player->GetEmail())) == 1) {
      cmdPick(SETUP_D->GetPlayerRaces(Player->GetEmail())[0]);
      return;
    }
  receive("\n\nYou must now pick a race.\n");
  receive("Picking a race influences what physical traits your character will have.\n");
  receive("\nYou may issue the following commands:\n");
  receive("\tlist - lists all races from which you can choose\n");
  receive("\thelp RACE - (e.g. \"help human\") gives you information on a race\n");
  receive("\tpick RACE - pick a particular race for your character\n");
  receive("*** If this is your first time on Haven:\n");
  receive("*** It is highly suggested that you choose elf, human, or dwarf\n");
  receive("*** and then (when prompted) select haven or glimmerdin as your nationality\n");
  receive("*** These towns are the most newbie-friendly and will give the best possible experience\n");
  receive("\nRace: ");
  input_to((: InputRace :), I_NOESC);
}

static void InputRace(string str) {
    string cmd, args;

    if( str == "" || !str ) {
	receive("\nRace: ");
	input_to((: InputRace :), I_NOESC);
	return;
    }
    if( sscanf(str, "%s %s", cmd, args) != 2 ) {
	cmd = str;
	args = 0;
    }
    switch(cmd) {
	case "list":
	cmdList();
	return;

	case "help":
	cmdHelp(args);
	return;

	case "pick":
	cmdPick(args);
	return;

	default:
	receive("\nInvalid command.\n  Use \"pick <race>\" to choose. \n"
	        "Use \"list\" to display all races. \nRace: ");
	input_to((: InputRace :), I_NOESC);
	return;
    }
}

static void cmdHelp(string args) {
    function f;
    string array races = (string array)SETUP_D->GetPlayerRaces(Player->GetEmail());
    string help;

    f = function(string str) {
	receive("\nRace: ");
	input_to((: InputRace :), I_NOESC);
    };
    if( !args ) {
	help = read_file(DIR_PLAYER_HELP + "/races") ||
	  "Error reading help file.\n";
	eventPage(explode(help, "\n"), MSG_HELP, f);
	return;
    }
    if( member_array(args = lower_case(args), races) == -1 ) {
	receive("No such race exists.\n\nRace: ");
	input_to((: InputRace :), I_NOESC);
	return;
    }
    help = (string)RACES_D->GetHelp(args);
    help += read_file(DIR_RACE_HELP + "/" + args);
    eventPage(explode(help, "\n"), MSG_HELP, f);
}

static void cmdList() {
    string list;

    list = format_page((string array)SETUP_D->GetPlayerRaces(Player->GetEmail()), 5);
    receive(list);
    receive("\nRace: ");
    input_to((: InputRace :), I_NOESC);
}

static void cmdPick(string args) {
    if( !args || args == "" ) {
	receive("You must specify a race to pick.\n\nRace: ");
	input_to((: InputRace :), I_NOESC);
	return;
    }
    if( member_array(args = lower_case(args),
		     (string array)SETUP_D->GetPlayerRaces(Player->GetEmail())) == -1 ) {
	receive("No such race.\nRace: ");
	input_to((: InputRace :), I_NOESC);
	return;
    }
    Player->SetRace(args);
  if (sizeof(SETUP_D->GetPlayerTowns(Player->GetEmail(), args)) > 1) {
        receive("\n\nYour race allows you to pick your hometown.\n");
        receive("\tThe commands you will use to do this are:\n");
        receive("\tlist - lists all towns from which you can choose\n");
        receive("\thelp TOWN - (e.g. \"help haven\") gives you "
                "information on a town\n");
        receive("\tpick TOWN - pick a particular town for yourself\n");
        receive("*** Haven and Glimmerdin are good newbie-friendly towns. ***");
        receive("\nTown: ");
        input_to( (: InputTown :), I_NOESC);
    } else {
      cmdPickTown(SETUP_D->GetPlayerTowns(Player->GetEmail(), args)[0]);
    }
} 

static void InputTown(string str) {
    string cmd, args;

    if( str == "" || !str ) {
	receive("\nTown: ");
	input_to((: InputTown :), I_NOESC);
	return;
    }
    if( sscanf(str, "%s %s", cmd, args) != 2 ) {
	cmd = str;
	args = 0;
    }

   if (args)
    args = capitalize(lower_case(args));
    
    switch(cmd) {
	case "list":
	cmdListTown();
	return;

	case "help":
	cmdHelpTown(args);
	return;

	case "pick":
	cmdPickTown(args);
	return;

	default:
	receive("\nInvalid command.\nTown: ");
	input_to((: InputTown :), I_NOESC);
	return;
    }
}

static void cmdHelpTown(string args) {
    function f;
    string help;

    f = function(string str) {
	receive("\nTown: ");
	input_to((: InputTown :), I_NOESC);
    };
    if( !args ) {
	receive("\nYou must specify a town.\n\nTown: ");
	input_to((: InputTown :), I_NOESC);
    }
  if (args) {
    if( member_array(capitalize(args), SETUP_D->GetPlayerTowns(Player->GetEmail(), Player->GetRace())) == -1) {
	  receive("That is not a valid town for your race.\n\nTown: ");
	  input_to((: InputTown :), I_NOESC);
	  return;
    }
  }
    if(HELP_D->GetHelp(lower_case(args))) {
       help = (string)HELP_D->GetHelp(lower_case(args));
    } else {
       help = "\nNo help available.";
    }
    eventPage(explode(help, "\n"), MSG_HELP, f);
}

static void cmdListTown() {
    string list;

    list = format_page(SETUP_D->GetPlayerTowns(Player->GetEmail(), Player->GetRace()), 5);
    receive(list);
    receive("\nTown: ");
    input_to((: InputTown :), I_NOESC);
}

static void cmdPickTown(string args) {
    string language;
    language = SETUP_D->GetLanguage(capitalize(args));
    if( !args || args == "" ) {
	receive("You must specify a town to pick.\n\nTown: ");
	input_to((: InputTown :), I_NOESC);
	return;
    }
  if( member_array(args, SETUP_D->GetPlayerTowns(Player->GetEmail(), Player->GetRace())) == -1) {
	receive("That is not a valid town for your race.\nTown: ");
	input_to((: InputTown :), I_NOESC);
	return;
    }
    Player->SetTown(capitalize(args));
    Player->AddReputation(capitalize(args), 50);
    Player->SetNationality(capitalize(args));
    Player->RemoveLanguage(Player->GetNativeLanguage());
    Player->SetLanguage(language, 100, 1);
    if (Player->GetRace() == "gnoll" && Player->GetTown() == "Lisht") Player->RemoveLanguage("Heyami");
    if (Player->GetRace() == "elf" && Player->GetTown() == "Lisht") {
      Player->RemoveLanguage("Eltherian");
      Player->SetLanguage("Alatherian", 100, 1);
      Player->SetLanguage("Rehshai", 100);
      }
    if(Player->GetRace() != "human") {
       Player->SetReligion(SETUP_D->GetReligion(args));
    } else Player->SetReligion("agnostic");
    if (Player->GetRace() == "elf" && Player->GetTown() == "Lisht") {
      Player->SetReligion("Anteky");
    }
    MORALITY_D->SetBaseMorality(Player);
    if (sizeof(SETUP_D->GetMoveMessages(Player->GetRace()))) {
      Player->SetMessage("leave", SETUP_D->GetMoveMessages(Player->GetRace())[0]);
      Player->SetMessage("come", SETUP_D->GetMoveMessages(Player->GetRace())[1]);
      }
  if (Player->GetSize() == SIZE_MEDIUM) {
         new(STD_CLOTHING "pants")->eventMove(Player);
     new(STD_CLOTHING "shirt")->eventMove(Player);
     new(STD_CLOTHING "shoes")->eventMove(Player);
}
  if (Player->GetSize() == SIZE_VERY_SMALL) {
    new(STD_CLOTHING "vs_shirt")->eventMove(Player);
    new(STD_CLOTHING "vs_shoes")->eventMove(Player);
    new(STD_CLOTHING "vs_pants")->eventMove(Player);
  }
  if (Player->GetSize() == SIZE_SMALL) {
         new(STD_CLOTHING "small_pants")->eventMove(Player);
     new(STD_CLOTHING "small_shirt")->eventMove(Player);
     new(STD_CLOTHING "small_shoes")->eventMove(Player);
}
  if (Player->GetSize() == SIZE_VERY_LARGE) {
    new(STD_CLOTHING "vl_shirt")->eventMove(Player);
    new(STD_CLOTHING "vl_shoes")->eventMove(Player);
    new(STD_CLOTHING "vl_pants")->eventMove(Player);
  }
  if (Player->GetSize() == SIZE_LARGE) {
    new(STD_CLOTHING "lg_shirt")->eventMove(Player);
    new(STD_CLOTHING "lg_pants")->eventMove(Player);
    new(STD_CLOTHING "lg_shoes")->eventMove(Player);
  }
    CHAT_D->eventSendChannel("LIB_CONNECT", "notify",
       "New Player: " + capitalize(Player->GetKeyName()) );
    CHAT_D->eventSendChannel("LIB_CONNECT", "allnotify",
       "New Player: " + capitalize(Player->GetKeyName()) + " (" + Player->GetEmail() + ")");
  Player->SetWimpy(30);
  receive("\nThank you! An email has been sent to " + Player->GetEmail() + " with your password!\n\n\n");
  eventEnterGame();
}
 
static void eventTimeout() {
    if( !interactive(this_object()) ) {
	Destruct();
    }
    else if( query_idle(this_object()) > LOGON_TIMEOUT ) {
	receive("\nLogin timed out.\n");
	Destruct();
    }
    else call_out( (: eventTimeout :), LOGON_TIMEOUT );
}

varargs int eventPrint(string msg, mixed cl, mixed arg3) {
    if( !cl || !intp(cl) ) return 0;
    if( cl & MSG_NOWRAP ) receive(strip_colours(msg));
   else receive(wrap(strip_colours(msg), GetScreen()[0]));
    return 1;
}

static private void Destruct() {
    if( Player && !NetDead ) destruct(Player);
    remove_call_out();
    destruct(this_object());
}

void eventDestruct() {
    Destruct();
}

string GetKeyName() {
    if(!interactive(this_object())) return 0;
    else if(Name) return Name;
    else return "";
}

string GetCapName() {
    string tmp;

    tmp = GetKeyName();
    return (tmp ? capitalize(tmp) : "");
}

static void terminal_type(string str) {
    if( !stringp(str) ) return;
    else Terminal = lower_case(str);
}

static void window_size(int width, int height) {
    Screen = ({ width, height });
}

int *GetScreen() {
   if( Screen ) return Screen;
   else return ({ 79, 24 });
}

void SetLastError(mapping m) {
    if (previous_object() != master()) return;
    LastError = m;
}

mapping GetLastError() {
    string caller = file_name(previous_object());
    if( caller[0..23] == "/secure/cmds/creator/dbx" ||
       caller[0..22]  == "/secure/cmds/player/bug" ) return LastError;
    error("Privilege Violation: " + caller);
}

static void eventGeneratePassword(string email) {
  string word = translate("password", 0, "unused");
  string pass;
  word = "password";
  Player->SetPassword(pass = crypt(word, 0));
  Player->SetConfirmedEmail(1);
  Player->SetNewServer(1);
  receive("Your password is " + word + ".");
  CHARACTER_D->eventLink(email, Player->GetKeyName());
  SMTP_D->eventCreateOutgoingMessage( ({ email }),
     "Welcome to Haven! (Password enclosed!)",
     "Your character named " + Player->GetName() + " has been created!\n"
     "Your password has been set to: \"" + word + "\", and you should \n"
     "use the command \"passwd\" to change this as soon as you login. \n"
     "Please visit our forum at http://www.havenmud.com/forum/ for game updates! \n"
     "Don't forget to check out our wiki at http://www.havenmud.com/wiki for wiki \n"
     "help pages!\n"
     "Welcome again, \n"
     "Duuk@Haven!\n"
     );
}
