Haven uses a natural language type parser descended from the Zork role
playing games.  As such, it is meant to allow you to enter in commands
in the way you think instead of requiring you to think like a computer.
At first, this may seem a bit counter-intuitive to people used to
working with computers and thinking like computers.  The end goal of
the system, however, is to make sure that if an action is possible in
the game, you can express it without playing syntax games.

Have you ever played a mud where you had to guess the syntax of a
command in order to get a task accomplished.  For example, in order to
complete a quest, you KNOW you have to press the damn button.  But you
have tried 'press button'.  You have even tried 'push button' and
'poke the damn button'.  No go.  The game wanted 'depress red button'.
The text has become a barrier to the reality it is trying to create.

On Haven, all of the above would have worked.  All of them.  And if
you tried something that the parser did not know about (say you tried
'punch'), it would have told you that it completely fails to understand
the 'punch' command.  Not the obscure 'What?' you get on most muds.
The first part of understanding how commands work on Haven is thus to
understand what the game is telling you when something you try does not
work:

'Try "help index" for a list of command types.'

This error message means you entered in a command not understood at all
by the mud.  In general, this should only be caused by typos because we
should be creating verbs for the things you think you should be allowed
to do.

'Which of the swords do you mean?'
Ever gone into a shop on a mud and typed 'sell sword' and accidentally
sold your best sword?  Haven does not resolve such ambiguities.  It
asks you instead to specify which sword you mean. You can resolve these
conflicts by:

'sell great sword'
'sell first sword'
'sell excalibur'

You should be able to use any adjective that describes that sword to
refer to it.  If you have two completely identical objects, use first,
second, third, etc. to distinguish among them.

Other error messages

There are other error messages you will get.  Sometimes, if you used a
command wrong, it will be an error message telling you how to use the
command.  If we did our jobs right, you only get such error messages
when you are not thinking.  If it is something you really feel should
be expressed the way you typed it, then it is probably an oversight we
should correct.

Another kind of error message is one telling you that what you tried is
not possible where you are.  For example:

> attack board
The board is not alive.

Or if you try to eat the board:

> eat board
You can't eat that.
